{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/weixinpay.png","path":"images/weixinpay.png","modified":0,"renderable":0},{"_id":"source/resume/resume.md","path":"resume/resume.md","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.266c1c.css","path":"main.266c1c.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.096dc6.js","path":"slider.096dc6.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.266c1c.js","path":"main.266c1c.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.906508.js","path":"mobile.906508.js","modified":0,"renderable":1},{"_id":"source/images/hexo/git-gui.png","path":"images/hexo/git-gui.png","modified":0,"renderable":0},{"_id":"source/images/hexo/hexo-server.png","path":"images/hexo/hexo-server.png","modified":0,"renderable":0},{"_id":"source/images/hexo/hexo-v.png","path":"images/hexo/hexo-v.png","modified":0,"renderable":0},{"_id":"source/images/hexo/new-repo.png","path":"images/hexo/new-repo.png","modified":0,"renderable":0},{"_id":"source/images/hexo/new-repository.png","path":"images/hexo/new-repository.png","modified":0,"renderable":0},{"_id":"source/images/hexo/npm-install.png","path":"images/hexo/npm-install.png","modified":0,"renderable":0},{"_id":"source/images/hexo/repo-done.png","path":"images/hexo/repo-done.png","modified":0,"renderable":0},{"_id":"source/images/hexo/show-ssh.png","path":"images/hexo/show-ssh.png","modified":0,"renderable":0},{"_id":"source/images/hexo/ssh-key.png","path":"images/hexo/ssh-key.png","modified":0,"renderable":0},{"_id":"source/images/hexo/ssh-setting.png","path":"images/hexo/ssh-setting.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"source/images/hexo/add-ssh-key.png","path":"images/hexo/add-ssh-key.png","modified":0,"renderable":0},{"_id":"source/resume/resume.pdf","path":"resume/resume.pdf","modified":0,"renderable":0},{"_id":"source/images/hexo/look-me.png","path":"images/hexo/look-me.png","modified":0,"renderable":0},{"_id":"source/images/hexo/run-hexo.png","path":"images/hexo/run-hexo.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"7a46388781086e6b03495d31f96f25b114539e62","modified":1506754969346},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1506754969362},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1506754969362},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1506754969362},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1506754969362},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1506754969362},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1506754969362},{"_id":"themes/yilia/_config.yml","hash":"5ab661a417eb77656fc30d09028816cc97b733ac","modified":1506754969362},{"_id":"themes/yilia/README.md","hash":"86757b00d393bd4956a252d92a469f11f2ae8914","modified":1506754969362},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1506754969393},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1506754969424},{"_id":"source/_posts/hexo搭建博客教程.md","hash":"139bececf7f29e50cf00bc86d02513b97642da0f","modified":1506754969346},{"_id":"source/_posts/JS-模块化编程-require-js-的用法.md","hash":"3097713befe9398ba4acf7ed46aa00b2efacf6bc","modified":1506755416580},{"_id":"source/images/alipay.png","hash":"46b30e2ab86b192a5b989aa36a8f8b0054a6d7ed","modified":1506754969346},{"_id":"source/images/avatar.jpg","hash":"9512ea358b226c7d16fe1aaefdf1b9486a086a3c","modified":1506754969346},{"_id":"source/images/weixinpay.png","hash":"4ea1036ebbb487aeb0dbc90f68cf305a0399e47e","modified":1506754969362},{"_id":"source/resume/resume.md","hash":"eed547a1c0eebf974bc83cc728ff24a4d9f7ed85","modified":1506754969362},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1506754969362},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1506754969362},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1506754969362},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1506754969362},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1506754969362},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1506754969362},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1506754969362},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1506754969377},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1506754969377},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1506754969377},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1506754969377},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1506754969393},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1506754969377},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1506754969393},{"_id":"themes/yilia/source/main.266c1c.css","hash":"6b9cfabb81f021081a93da5a069674e9be910194","modified":1506754969424},{"_id":"themes/yilia/source/slider.096dc6.js","hash":"25e34d09ead8cabd34d777997c4b1f073918f6cf","modified":1506754969424},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1506754969393},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1506754969409},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1506754969377},{"_id":"themes/yilia/source/main.266c1c.js","hash":"42f38b932426a0bd24a41343a75f8517ca00e8eb","modified":1506754969424},{"_id":"themes/yilia/source/mobile.906508.js","hash":"60329066ec16a2f264b438b94c9d1cc44a551f88","modified":1506754969424},{"_id":"source/images/hexo/git-gui.png","hash":"b324377cdb6d370e67e61b9e3f1b9d279f5634d6","modified":1506754969346},{"_id":"source/images/hexo/hexo-server.png","hash":"453056564a860a03fd8df0c086adc5b9bcebc52b","modified":1506754969346},{"_id":"source/images/hexo/hexo-v.png","hash":"c2efc5c33b66a5f3c47cd17bcef6bcf214cc43e0","modified":1506754969346},{"_id":"source/images/hexo/new-repo.png","hash":"00725a61f4c980dd446b6975214ea0dba70c5cd5","modified":1506754969346},{"_id":"source/images/hexo/new-repository.png","hash":"0e670c0a940af1dc115cc210bd0257e9ce0ba947","modified":1506754969346},{"_id":"source/images/hexo/npm-install.png","hash":"97289f27ef3483c67ebb59fa97264f4c71652013","modified":1506754969362},{"_id":"source/images/hexo/repo-done.png","hash":"ccdb493dcdc4f7405f7c6d0b5b264e45b8be6cc7","modified":1506754969362},{"_id":"source/images/hexo/show-ssh.png","hash":"56eac9b146d3bab913df234f89fb640c4a034af2","modified":1506754969362},{"_id":"source/images/hexo/ssh-key.png","hash":"4a9e358429e5ee004c0e4c670cea4d2c3c3d45a1","modified":1506754969362},{"_id":"source/images/hexo/ssh-setting.png","hash":"cc2ec6b0a93fa0fc36a758ac226746e11211155a","modified":1506754969362},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"dff6e1f3b5e82495ec776baa24d9e6bbaad883df","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"9bfcbd9e71401b6da6b2bbbe61e97625ca247b7a","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"e2b3f2b3631ef211a4d98d11f0da2d285340f10e","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1506754969377},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1506754969409},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1506754969409},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1506754969409},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1506754969409},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1506754969409},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1506754969409},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1506754969409},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1506754969424},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1506754969424},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1506754969393},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1506754969393},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1506754969393},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1506754969393},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1506754969393},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1506754969393},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1506754969393},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1506754969393},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"2d1c70bb606c0d87e4f68ec2e600e08b27f32b99","modified":1506754969393},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1506754969393},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1506754969393},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1506754969393},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1506754969393},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1506754969393},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1506754969393},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1506754969393},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1506754969393},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1506754969409},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1506754969409},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1506754969409},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1506754969409},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1506754969409},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1506754969409},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1506754969409},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"6932c642bf8191768d7090982a91c8c1f1c4ed1e","modified":1506754969409},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1506754969409},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1506754969409},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1506754969409},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1506754969409},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1506754969409},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1506754969409},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d12df875d3b587354ce59fb7c431ecece53560e3","modified":1506754969409},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1506754969409},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1506754969409},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1506754969409},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1506754969409},{"_id":"themes/yilia/source-src/js/slider.js","hash":"707842efee006e3ea9b6765d7460f4ef4f08e41f","modified":1506754969409},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1506754969409},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"3e0fd4479a40ddbd1571c6c953df7e23637b61f5","modified":1506754969409},{"_id":"source/images/hexo/add-ssh-key.png","hash":"8efeaea34f8511f59cc43d7fc3e84f86acfc0edd","modified":1506754969346},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"c71c3e704e844df3676f4a1b82d9cd8286f0b06b","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"f75b236818b6c0ec0e5e6c12a517825d6230d756","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"cc384aeaed9ffde92efdf192c26db4da3fe5858f","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"06a2dd18ac9a43fbc9a59c61e6f795f9326e9927","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1506754969377},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1506754969377},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1506754969393},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1506754969393},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1506754969393},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1506754969393},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1506754969393},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1506754969393},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1506754969393},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1506754969393},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1506754969393},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1506754969393},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1506754969393},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1506754969393},{"_id":"source/resume/resume.pdf","hash":"65866627d8f312943476956c1c6cb3d1c52d83da","modified":1506754969362},{"_id":"source/images/hexo/look-me.png","hash":"f70c195e63768ceed2f5f8cb914826ff5bf2d46f","modified":1506754969346},{"_id":"source/images/hexo/run-hexo.png","hash":"356db4d87c36660a07fac256c8df4ee1de87e7be","modified":1506754969362},{"_id":"public/content.json","hash":"33c93f186bcda854d6d45d81b67148561067e94f","modified":1506756387849},{"_id":"public/2017/08/30/JS-模块化编程-require-js-的用法/index.html","hash":"e972e49f2ab7cb9f210239c92ba3c07d214e4284","modified":1506756387927},{"_id":"public/2017/08/30/hexo搭建博客教程/index.html","hash":"ee44975e54a769f710f98d74a231713a6758ecd7","modified":1506756387927},{"_id":"public/index.html","hash":"ba3d78c237615c51998ea741510ea0d4ac7313bd","modified":1506756387927},{"_id":"public/archives/index.html","hash":"6235b2404780e3f3533215c71d16bb5b4fd3ed5f","modified":1506756387927},{"_id":"public/archives/2017/index.html","hash":"f0e6c71af68a291a84b07bcf48bcedd0db587789","modified":1506756387927},{"_id":"public/archives/2017/08/index.html","hash":"18ea35e03dab773fa4dfe5752cc7d1d3980a0e24","modified":1506756387927},{"_id":"public/tags/js/index.html","hash":"9a07c5ab5b588c34775167440116a3242bcc37b8","modified":1506756387927},{"_id":"public/tags/require-js/index.html","hash":"5cff68422598f130c7bc5dfea795111fb04e1e99","modified":1506756387927}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"JS 模块化编程 require.js 的用法","date":"2017-08-30T05:43:00.000Z","_content":"## 什么是RequireJS?\n>RequireJS 是一个JavaScript模块加载器。它非常适合在浏览器中使用, 但它也可以用在其他脚本环境, 就像 Rhino and Node. 使用RequireJS加载模块化脚本将提高代码的加载速度和质量。\n## 为什么用RequireJS?\n\n 1. 异步“加载”。我们知道，通常网站都会把script脚本的放在html的最后，这样就可以避免浏览器执行js带来的页面阻塞。使用RequireJS，会在相关的js加载后执行回调函数，这个过程是异步的，所以它不会阻塞页面。\n 2. 按需加载。通过RequireJS，你可以在需要加载js逻辑的时候再加载对应 的js模块，这样避免了在初始化网页的时候发生大量的请求和数据传输，或许对于一些人来说，某些模块可能他根本就不需要，那就显得没有必要。\n 3. 更加方便的模块依赖管理。相信你曾经一定遇到过因为script标签顺序问题而导致依赖关系发生错误，这个函数未定义，那个变量undefine之类的。通过RequireJS的机制，你能确保在所有的依赖模块都加载以后再执行相关的文件，所以可以起到依赖管理的作用。\n 4. 更加高效的版本管理。想一想，如果你还是用的script脚本引入的方式来引入一个jQuery2.x的文件，然后你有100个页面都是这么引用的，那当你想换成jQuery3.x，那你就不得不去改这100个页面。但是如果你的requireJS有在config中做jQuery的path映射，那你只需要改一处地方即可。\n 5. 当然还有一些诸如cdn加载不到js文件，可以请求本地文件等其它的优点，这里就不一一列举了。\n\n\n<!--more-->\n## require.js的加载\n使用require.js的第一步，是先去官方网站下载最新版本。\n下载后，假定把它放在js子目录下面，就可以加载了。\n\n```\n<script src=\"js/require.js\"></script>\n```\n加载require.js以后，下一步就要加载我们自己的代码了。假定我们自己的代码文件是main.js，也放在js目录下面。那么，只需要写成下面这样就行了：\n\n```\n<script src=\"js/require.js\" data-main=\"js/main\"></script>\n```\ndata-main属性的作用是，指定网页程序的主模块。在上例中，就是js目录下面的main.js，这个文件会第一个被require.js加载。由于require.js默认的文件后缀名是js，所以可以把main.js简写成main。\n\n## 主模块的写法\n上一节的main.js，我把它称为\"主模块\"，意思是整个网页的入口代码。它有点像C语言的main()函数，所有代码都从这儿开始运行。\n下面就来看，怎么写main.js。\n\n```\n// main.js\nrequire(['moduleA', 'moduleB', 'moduleC'], function (moduleA, moduleB, moduleC){\n　　// some code here\n});\n```\nrequire()函数接受两个参数。第一个参数是一个数组，表示所依赖的模块，上例就是['moduleA', 'moduleB', 'moduleC']，即主模块依赖这三个模块；第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块。\nrequire()异步加载moduleA，moduleB和moduleC，浏览器不会失去响应；它指定的回调函数，只有前面的模块都加载成功后，才会运行，解决了依赖性的问题。\n下面，我们看一个实际的例子。\n假定主模块依赖jquery、underscore和backbone这三个模块，main.js就可以这样写：\n\n```\nrequire(['jquery', 'underscore', 'backbone'], function ($, _, Backbone){\n　　// some code here\n});\n\n```\n## 模块的加载\n上一节最后的示例中，主模块的依赖模块是['jquery', 'underscore', 'backbone']。默认情况下，require.js假定这三个模块与main.js在同一个目录，文件名分别为jquery.js，underscore.js和backbone.js，然后自动加载。\n使用require.config()方法，我们可以对模块的加载行为进行自定义。require.config()就写在主模块（main.js）的头部。参数就是一个对象，这个对象的paths属性指定各个模块的加载路径。\n\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n　　　　}\n　　});\n```\n上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录（js子目录）。如果这些模块在其他目录，比如js/lib目录，则有两种写法。一种是逐一指定路径。\n\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"lib/jquery.min\",\n　　　　　　\"underscore\": \"lib/underscore.min\",\n　　　　　　\"backbone\": \"lib/backbone.min\"\n　　　　}\n　　});\n```\n另一种则是直接改变基目录（baseUrl）。\n\n```\n　　require.config({\n　　　　baseUrl: \"js/lib\",\n　　　　paths: {\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n　　　　}\n　　});\n```\n## AMD模块的写法\n\nrequire.js加载的模块，采用AMD规范。也就是说，模块必须按照AMD的规定来写。\n具体来说，就是模块必须采用特定的define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。\n假定现在有一个math.js文件，它定义了一个math模块。那么，math.js就要这样写：\n\n```\n　　// math.js\n　　define(function (){\n　　　　var add = function (x,y){\n　　　　　　return x+y;\n　　　　};\n　　　　return {\n　　　　　　add: add\n　　　　};\n　　});\n```\n加载方法如下：\n\n```\n　　// main.js\n　　require(['math'], function (math){\n　　　　alert(math.add(1,1));\n　　});\n```\n如果这个模块还依赖其他模块，那么define()函数的第一个参数，必须是一个数组，指明该模块的依赖性。\n\n```\n　　define(['myLib'], function(myLib){\n　　　　function foo(){\n　　　　　　myLib.doSomething();\n　　　　}\n　　　　return {\n　　　　　　foo : foo\n　　　　};\n　　});\n```\n当require()函数加载上面这个模块的时候，就会先加载myLib.js文件\n\n## 加载非规范的模块\n理论上，require.js加载的模块，必须是按照AMD规范、用define()函数定义的模块。但是实际上，虽然已经有一部分流行的函数库（比如jQuery）符合AMD规范，更多的库并不符合。那么，require.js是否能够加载非规范的模块呢？\n回答是可以的。\n这样的模块在用require()加载之前，要先用require.config()方法，定义它们的一些特征。\n举例来说，underscore和backbone这两个库，都没有采用AMD规范编写。如果要加载它们的话，必须先定义它们的特征。\n\n```\n　　require.config({\n　　　　shim: {\n\n　　　　　　'underscore':{\n　　　　　　　　exports: '_'\n　　　　　　},\n　　　　　　'backbone': {\n　　　　　　　　deps: ['underscore', 'jquery'],\n　　　　　　　　exports: 'Backbone'\n　　　　　　}\n　　　　}\n　　});\n```\nrequire.config()接受一个配置对象，这个对象除了有前面说过的paths属性之外，还有一个shim属性，专门用来配置不兼容的模块。具体来说，每个模块要定义（1）exports值（输出的变量名），表明这个模块外部调用时的名称；（2）deps数组，表明该模块的依赖性。\n比如，jQuery的插件可以这样定义：\n\n```\n　　shim: {\n　　　　'jquery.scroll': {\n　　　　　　deps: ['jquery'],\n　　　　　　exports: 'jQuery.fn.scroll'\n　　　　}\n　　}\n```","source":"_posts/JS-模块化编程-require-js-的用法.md","raw":"---\ntitle: JS 模块化编程 require.js 的用法\ndate: 2017-08-30 13:43:00\ntags: \n\t- js \n\t- require.js\n---\n## 什么是RequireJS?\n>RequireJS 是一个JavaScript模块加载器。它非常适合在浏览器中使用, 但它也可以用在其他脚本环境, 就像 Rhino and Node. 使用RequireJS加载模块化脚本将提高代码的加载速度和质量。\n## 为什么用RequireJS?\n\n 1. 异步“加载”。我们知道，通常网站都会把script脚本的放在html的最后，这样就可以避免浏览器执行js带来的页面阻塞。使用RequireJS，会在相关的js加载后执行回调函数，这个过程是异步的，所以它不会阻塞页面。\n 2. 按需加载。通过RequireJS，你可以在需要加载js逻辑的时候再加载对应 的js模块，这样避免了在初始化网页的时候发生大量的请求和数据传输，或许对于一些人来说，某些模块可能他根本就不需要，那就显得没有必要。\n 3. 更加方便的模块依赖管理。相信你曾经一定遇到过因为script标签顺序问题而导致依赖关系发生错误，这个函数未定义，那个变量undefine之类的。通过RequireJS的机制，你能确保在所有的依赖模块都加载以后再执行相关的文件，所以可以起到依赖管理的作用。\n 4. 更加高效的版本管理。想一想，如果你还是用的script脚本引入的方式来引入一个jQuery2.x的文件，然后你有100个页面都是这么引用的，那当你想换成jQuery3.x，那你就不得不去改这100个页面。但是如果你的requireJS有在config中做jQuery的path映射，那你只需要改一处地方即可。\n 5. 当然还有一些诸如cdn加载不到js文件，可以请求本地文件等其它的优点，这里就不一一列举了。\n\n\n<!--more-->\n## require.js的加载\n使用require.js的第一步，是先去官方网站下载最新版本。\n下载后，假定把它放在js子目录下面，就可以加载了。\n\n```\n<script src=\"js/require.js\"></script>\n```\n加载require.js以后，下一步就要加载我们自己的代码了。假定我们自己的代码文件是main.js，也放在js目录下面。那么，只需要写成下面这样就行了：\n\n```\n<script src=\"js/require.js\" data-main=\"js/main\"></script>\n```\ndata-main属性的作用是，指定网页程序的主模块。在上例中，就是js目录下面的main.js，这个文件会第一个被require.js加载。由于require.js默认的文件后缀名是js，所以可以把main.js简写成main。\n\n## 主模块的写法\n上一节的main.js，我把它称为\"主模块\"，意思是整个网页的入口代码。它有点像C语言的main()函数，所有代码都从这儿开始运行。\n下面就来看，怎么写main.js。\n\n```\n// main.js\nrequire(['moduleA', 'moduleB', 'moduleC'], function (moduleA, moduleB, moduleC){\n　　// some code here\n});\n```\nrequire()函数接受两个参数。第一个参数是一个数组，表示所依赖的模块，上例就是['moduleA', 'moduleB', 'moduleC']，即主模块依赖这三个模块；第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块。\nrequire()异步加载moduleA，moduleB和moduleC，浏览器不会失去响应；它指定的回调函数，只有前面的模块都加载成功后，才会运行，解决了依赖性的问题。\n下面，我们看一个实际的例子。\n假定主模块依赖jquery、underscore和backbone这三个模块，main.js就可以这样写：\n\n```\nrequire(['jquery', 'underscore', 'backbone'], function ($, _, Backbone){\n　　// some code here\n});\n\n```\n## 模块的加载\n上一节最后的示例中，主模块的依赖模块是['jquery', 'underscore', 'backbone']。默认情况下，require.js假定这三个模块与main.js在同一个目录，文件名分别为jquery.js，underscore.js和backbone.js，然后自动加载。\n使用require.config()方法，我们可以对模块的加载行为进行自定义。require.config()就写在主模块（main.js）的头部。参数就是一个对象，这个对象的paths属性指定各个模块的加载路径。\n\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n　　　　}\n　　});\n```\n上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录（js子目录）。如果这些模块在其他目录，比如js/lib目录，则有两种写法。一种是逐一指定路径。\n\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"lib/jquery.min\",\n　　　　　　\"underscore\": \"lib/underscore.min\",\n　　　　　　\"backbone\": \"lib/backbone.min\"\n　　　　}\n　　});\n```\n另一种则是直接改变基目录（baseUrl）。\n\n```\n　　require.config({\n　　　　baseUrl: \"js/lib\",\n　　　　paths: {\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n　　　　}\n　　});\n```\n## AMD模块的写法\n\nrequire.js加载的模块，采用AMD规范。也就是说，模块必须按照AMD的规定来写。\n具体来说，就是模块必须采用特定的define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。\n假定现在有一个math.js文件，它定义了一个math模块。那么，math.js就要这样写：\n\n```\n　　// math.js\n　　define(function (){\n　　　　var add = function (x,y){\n　　　　　　return x+y;\n　　　　};\n　　　　return {\n　　　　　　add: add\n　　　　};\n　　});\n```\n加载方法如下：\n\n```\n　　// main.js\n　　require(['math'], function (math){\n　　　　alert(math.add(1,1));\n　　});\n```\n如果这个模块还依赖其他模块，那么define()函数的第一个参数，必须是一个数组，指明该模块的依赖性。\n\n```\n　　define(['myLib'], function(myLib){\n　　　　function foo(){\n　　　　　　myLib.doSomething();\n　　　　}\n　　　　return {\n　　　　　　foo : foo\n　　　　};\n　　});\n```\n当require()函数加载上面这个模块的时候，就会先加载myLib.js文件\n\n## 加载非规范的模块\n理论上，require.js加载的模块，必须是按照AMD规范、用define()函数定义的模块。但是实际上，虽然已经有一部分流行的函数库（比如jQuery）符合AMD规范，更多的库并不符合。那么，require.js是否能够加载非规范的模块呢？\n回答是可以的。\n这样的模块在用require()加载之前，要先用require.config()方法，定义它们的一些特征。\n举例来说，underscore和backbone这两个库，都没有采用AMD规范编写。如果要加载它们的话，必须先定义它们的特征。\n\n```\n　　require.config({\n　　　　shim: {\n\n　　　　　　'underscore':{\n　　　　　　　　exports: '_'\n　　　　　　},\n　　　　　　'backbone': {\n　　　　　　　　deps: ['underscore', 'jquery'],\n　　　　　　　　exports: 'Backbone'\n　　　　　　}\n　　　　}\n　　});\n```\nrequire.config()接受一个配置对象，这个对象除了有前面说过的paths属性之外，还有一个shim属性，专门用来配置不兼容的模块。具体来说，每个模块要定义（1）exports值（输出的变量名），表明这个模块外部调用时的名称；（2）deps数组，表明该模块的依赖性。\n比如，jQuery的插件可以这样定义：\n\n```\n　　shim: {\n　　　　'jquery.scroll': {\n　　　　　　deps: ['jquery'],\n　　　　　　exports: 'jQuery.fn.scroll'\n　　　　}\n　　}\n```","slug":"JS-模块化编程-require-js-的用法","published":1,"updated":"2017-09-30T07:10:16.580Z","_id":"cj86z7jth0000ncsgsan8jc8k","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是RequireJS\"><a href=\"#什么是RequireJS\" class=\"headerlink\" title=\"什么是RequireJS?\"></a>什么是RequireJS?</h2><blockquote>\n<p>RequireJS 是一个JavaScript模块加载器。它非常适合在浏览器中使用, 但它也可以用在其他脚本环境, 就像 Rhino and Node. 使用RequireJS加载模块化脚本将提高代码的加载速度和质量。</p>\n<h2 id=\"为什么用RequireJS\"><a href=\"#为什么用RequireJS\" class=\"headerlink\" title=\"为什么用RequireJS?\"></a>为什么用RequireJS?</h2></blockquote>\n<ol>\n<li>异步“加载”。我们知道，通常网站都会把script脚本的放在html的最后，这样就可以避免浏览器执行js带来的页面阻塞。使用RequireJS，会在相关的js加载后执行回调函数，这个过程是异步的，所以它不会阻塞页面。</li>\n<li>按需加载。通过RequireJS，你可以在需要加载js逻辑的时候再加载对应 的js模块，这样避免了在初始化网页的时候发生大量的请求和数据传输，或许对于一些人来说，某些模块可能他根本就不需要，那就显得没有必要。</li>\n<li>更加方便的模块依赖管理。相信你曾经一定遇到过因为script标签顺序问题而导致依赖关系发生错误，这个函数未定义，那个变量undefine之类的。通过RequireJS的机制，你能确保在所有的依赖模块都加载以后再执行相关的文件，所以可以起到依赖管理的作用。</li>\n<li>更加高效的版本管理。想一想，如果你还是用的script脚本引入的方式来引入一个jQuery2.x的文件，然后你有100个页面都是这么引用的，那当你想换成jQuery3.x，那你就不得不去改这100个页面。但是如果你的requireJS有在config中做jQuery的path映射，那你只需要改一处地方即可。</li>\n<li>当然还有一些诸如cdn加载不到js文件，可以请求本地文件等其它的优点，这里就不一一列举了。</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"require-js的加载\"><a href=\"#require-js的加载\" class=\"headerlink\" title=\"require.js的加载\"></a>require.js的加载</h2><p>使用require.js的第一步，是先去官方网站下载最新版本。<br>下载后，假定把它放在js子目录下面，就可以加载了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;js/require.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>加载require.js以后，下一步就要加载我们自己的代码了。假定我们自己的代码文件是main.js，也放在js目录下面。那么，只需要写成下面这样就行了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;js/require.js&quot; data-main=&quot;js/main&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>data-main属性的作用是，指定网页程序的主模块。在上例中，就是js目录下面的main.js，这个文件会第一个被require.js加载。由于require.js默认的文件后缀名是js，所以可以把main.js简写成main。</p>\n<h2 id=\"主模块的写法\"><a href=\"#主模块的写法\" class=\"headerlink\" title=\"主模块的写法\"></a>主模块的写法</h2><p>上一节的main.js，我把它称为”主模块”，意思是整个网页的入口代码。它有点像C语言的main()函数，所有代码都从这儿开始运行。<br>下面就来看，怎么写main.js。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// main.js</div><div class=\"line\">require([&apos;moduleA&apos;, &apos;moduleB&apos;, &apos;moduleC&apos;], function (moduleA, moduleB, moduleC)&#123;</div><div class=\"line\">　　// some code here</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>require()函数接受两个参数。第一个参数是一个数组，表示所依赖的模块，上例就是[‘moduleA’, ‘moduleB’, ‘moduleC’]，即主模块依赖这三个模块；第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块。<br>require()异步加载moduleA，moduleB和moduleC，浏览器不会失去响应；它指定的回调函数，只有前面的模块都加载成功后，才会运行，解决了依赖性的问题。<br>下面，我们看一个实际的例子。<br>假定主模块依赖jquery、underscore和backbone这三个模块，main.js就可以这样写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">require([&apos;jquery&apos;, &apos;underscore&apos;, &apos;backbone&apos;], function ($, _, Backbone)&#123;</div><div class=\"line\">　　// some code here</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"模块的加载\"><a href=\"#模块的加载\" class=\"headerlink\" title=\"模块的加载\"></a>模块的加载</h2><p>上一节最后的示例中，主模块的依赖模块是[‘jquery’, ‘underscore’, ‘backbone’]。默认情况下，require.js假定这三个模块与main.js在同一个目录，文件名分别为jquery.js，underscore.js和backbone.js，然后自动加载。<br>使用require.config()方法，我们可以对模块的加载行为进行自定义。require.config()就写在主模块（main.js）的头部。参数就是一个对象，这个对象的paths属性指定各个模块的加载路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;jquery.min&quot;,</div><div class=\"line\">　　　　　　&quot;underscore&quot;: &quot;underscore.min&quot;,</div><div class=\"line\">　　　　　　&quot;backbone&quot;: &quot;backbone.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录（js子目录）。如果这些模块在其他目录，比如js/lib目录，则有两种写法。一种是逐一指定路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;lib/jquery.min&quot;,</div><div class=\"line\">　　　　　　&quot;underscore&quot;: &quot;lib/underscore.min&quot;,</div><div class=\"line\">　　　　　　&quot;backbone&quot;: &quot;lib/backbone.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>另一种则是直接改变基目录（baseUrl）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　baseUrl: &quot;js/lib&quot;,</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;jquery.min&quot;,</div><div class=\"line\">　　　　　　&quot;underscore&quot;: &quot;underscore.min&quot;,</div><div class=\"line\">　　　　　　&quot;backbone&quot;: &quot;backbone.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"AMD模块的写法\"><a href=\"#AMD模块的写法\" class=\"headerlink\" title=\"AMD模块的写法\"></a>AMD模块的写法</h2><p>require.js加载的模块，采用AMD规范。也就是说，模块必须按照AMD的规定来写。<br>具体来说，就是模块必须采用特定的define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。<br>假定现在有一个math.js文件，它定义了一个math模块。那么，math.js就要这样写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　// math.js</div><div class=\"line\">　　define(function ()&#123;</div><div class=\"line\">　　　　var add = function (x,y)&#123;</div><div class=\"line\">　　　　　　return x+y;</div><div class=\"line\">　　　　&#125;;</div><div class=\"line\">　　　　return &#123;</div><div class=\"line\">　　　　　　add: add</div><div class=\"line\">　　　　&#125;;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>加载方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　// main.js</div><div class=\"line\">　　require([&apos;math&apos;], function (math)&#123;</div><div class=\"line\">　　　　alert(math.add(1,1));</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>如果这个模块还依赖其他模块，那么define()函数的第一个参数，必须是一个数组，指明该模块的依赖性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　define([&apos;myLib&apos;], function(myLib)&#123;</div><div class=\"line\">　　　　function foo()&#123;</div><div class=\"line\">　　　　　　myLib.doSomething();</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　　　return &#123;</div><div class=\"line\">　　　　　　foo : foo</div><div class=\"line\">　　　　&#125;;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>当require()函数加载上面这个模块的时候，就会先加载myLib.js文件</p>\n<h2 id=\"加载非规范的模块\"><a href=\"#加载非规范的模块\" class=\"headerlink\" title=\"加载非规范的模块\"></a>加载非规范的模块</h2><p>理论上，require.js加载的模块，必须是按照AMD规范、用define()函数定义的模块。但是实际上，虽然已经有一部分流行的函数库（比如jQuery）符合AMD规范，更多的库并不符合。那么，require.js是否能够加载非规范的模块呢？<br>回答是可以的。<br>这样的模块在用require()加载之前，要先用require.config()方法，定义它们的一些特征。<br>举例来说，underscore和backbone这两个库，都没有采用AMD规范编写。如果要加载它们的话，必须先定义它们的特征。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　shim: &#123;</div><div class=\"line\"></div><div class=\"line\">　　　　　　&apos;underscore&apos;:&#123;</div><div class=\"line\">　　　　　　　　exports: &apos;_&apos;</div><div class=\"line\">　　　　　　&#125;,</div><div class=\"line\">　　　　　　&apos;backbone&apos;: &#123;</div><div class=\"line\">　　　　　　　　deps: [&apos;underscore&apos;, &apos;jquery&apos;],</div><div class=\"line\">　　　　　　　　exports: &apos;Backbone&apos;</div><div class=\"line\">　　　　　　&#125;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>require.config()接受一个配置对象，这个对象除了有前面说过的paths属性之外，还有一个shim属性，专门用来配置不兼容的模块。具体来说，每个模块要定义（1）exports值（输出的变量名），表明这个模块外部调用时的名称；（2）deps数组，表明该模块的依赖性。<br>比如，jQuery的插件可以这样定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　shim: &#123;</div><div class=\"line\">　　　　&apos;jquery.scroll&apos;: &#123;</div><div class=\"line\">　　　　　　deps: [&apos;jquery&apos;],</div><div class=\"line\">　　　　　　exports: &apos;jQuery.fn.scroll&apos;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"什么是RequireJS\"><a href=\"#什么是RequireJS\" class=\"headerlink\" title=\"什么是RequireJS?\"></a>什么是RequireJS?</h2><blockquote>\n<p>RequireJS 是一个JavaScript模块加载器。它非常适合在浏览器中使用, 但它也可以用在其他脚本环境, 就像 Rhino and Node. 使用RequireJS加载模块化脚本将提高代码的加载速度和质量。</p>\n<h2 id=\"为什么用RequireJS\"><a href=\"#为什么用RequireJS\" class=\"headerlink\" title=\"为什么用RequireJS?\"></a>为什么用RequireJS?</h2></blockquote>\n<ol>\n<li>异步“加载”。我们知道，通常网站都会把script脚本的放在html的最后，这样就可以避免浏览器执行js带来的页面阻塞。使用RequireJS，会在相关的js加载后执行回调函数，这个过程是异步的，所以它不会阻塞页面。</li>\n<li>按需加载。通过RequireJS，你可以在需要加载js逻辑的时候再加载对应 的js模块，这样避免了在初始化网页的时候发生大量的请求和数据传输，或许对于一些人来说，某些模块可能他根本就不需要，那就显得没有必要。</li>\n<li>更加方便的模块依赖管理。相信你曾经一定遇到过因为script标签顺序问题而导致依赖关系发生错误，这个函数未定义，那个变量undefine之类的。通过RequireJS的机制，你能确保在所有的依赖模块都加载以后再执行相关的文件，所以可以起到依赖管理的作用。</li>\n<li>更加高效的版本管理。想一想，如果你还是用的script脚本引入的方式来引入一个jQuery2.x的文件，然后你有100个页面都是这么引用的，那当你想换成jQuery3.x，那你就不得不去改这100个页面。但是如果你的requireJS有在config中做jQuery的path映射，那你只需要改一处地方即可。</li>\n<li>当然还有一些诸如cdn加载不到js文件，可以请求本地文件等其它的优点，这里就不一一列举了。</li>\n</ol>","more":"<h2 id=\"require-js的加载\"><a href=\"#require-js的加载\" class=\"headerlink\" title=\"require.js的加载\"></a>require.js的加载</h2><p>使用require.js的第一步，是先去官方网站下载最新版本。<br>下载后，假定把它放在js子目录下面，就可以加载了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;js/require.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>加载require.js以后，下一步就要加载我们自己的代码了。假定我们自己的代码文件是main.js，也放在js目录下面。那么，只需要写成下面这样就行了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;js/require.js&quot; data-main=&quot;js/main&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>data-main属性的作用是，指定网页程序的主模块。在上例中，就是js目录下面的main.js，这个文件会第一个被require.js加载。由于require.js默认的文件后缀名是js，所以可以把main.js简写成main。</p>\n<h2 id=\"主模块的写法\"><a href=\"#主模块的写法\" class=\"headerlink\" title=\"主模块的写法\"></a>主模块的写法</h2><p>上一节的main.js，我把它称为”主模块”，意思是整个网页的入口代码。它有点像C语言的main()函数，所有代码都从这儿开始运行。<br>下面就来看，怎么写main.js。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// main.js</div><div class=\"line\">require([&apos;moduleA&apos;, &apos;moduleB&apos;, &apos;moduleC&apos;], function (moduleA, moduleB, moduleC)&#123;</div><div class=\"line\">　　// some code here</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>require()函数接受两个参数。第一个参数是一个数组，表示所依赖的模块，上例就是[‘moduleA’, ‘moduleB’, ‘moduleC’]，即主模块依赖这三个模块；第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，从而在回调函数内部就可以使用这些模块。<br>require()异步加载moduleA，moduleB和moduleC，浏览器不会失去响应；它指定的回调函数，只有前面的模块都加载成功后，才会运行，解决了依赖性的问题。<br>下面，我们看一个实际的例子。<br>假定主模块依赖jquery、underscore和backbone这三个模块，main.js就可以这样写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">require([&apos;jquery&apos;, &apos;underscore&apos;, &apos;backbone&apos;], function ($, _, Backbone)&#123;</div><div class=\"line\">　　// some code here</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"模块的加载\"><a href=\"#模块的加载\" class=\"headerlink\" title=\"模块的加载\"></a>模块的加载</h2><p>上一节最后的示例中，主模块的依赖模块是[‘jquery’, ‘underscore’, ‘backbone’]。默认情况下，require.js假定这三个模块与main.js在同一个目录，文件名分别为jquery.js，underscore.js和backbone.js，然后自动加载。<br>使用require.config()方法，我们可以对模块的加载行为进行自定义。require.config()就写在主模块（main.js）的头部。参数就是一个对象，这个对象的paths属性指定各个模块的加载路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;jquery.min&quot;,</div><div class=\"line\">　　　　　　&quot;underscore&quot;: &quot;underscore.min&quot;,</div><div class=\"line\">　　　　　　&quot;backbone&quot;: &quot;backbone.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录（js子目录）。如果这些模块在其他目录，比如js/lib目录，则有两种写法。一种是逐一指定路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;lib/jquery.min&quot;,</div><div class=\"line\">　　　　　　&quot;underscore&quot;: &quot;lib/underscore.min&quot;,</div><div class=\"line\">　　　　　　&quot;backbone&quot;: &quot;lib/backbone.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>另一种则是直接改变基目录（baseUrl）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　baseUrl: &quot;js/lib&quot;,</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;jquery.min&quot;,</div><div class=\"line\">　　　　　　&quot;underscore&quot;: &quot;underscore.min&quot;,</div><div class=\"line\">　　　　　　&quot;backbone&quot;: &quot;backbone.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"AMD模块的写法\"><a href=\"#AMD模块的写法\" class=\"headerlink\" title=\"AMD模块的写法\"></a>AMD模块的写法</h2><p>require.js加载的模块，采用AMD规范。也就是说，模块必须按照AMD的规定来写。<br>具体来说，就是模块必须采用特定的define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。<br>假定现在有一个math.js文件，它定义了一个math模块。那么，math.js就要这样写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　// math.js</div><div class=\"line\">　　define(function ()&#123;</div><div class=\"line\">　　　　var add = function (x,y)&#123;</div><div class=\"line\">　　　　　　return x+y;</div><div class=\"line\">　　　　&#125;;</div><div class=\"line\">　　　　return &#123;</div><div class=\"line\">　　　　　　add: add</div><div class=\"line\">　　　　&#125;;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>加载方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　// main.js</div><div class=\"line\">　　require([&apos;math&apos;], function (math)&#123;</div><div class=\"line\">　　　　alert(math.add(1,1));</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>如果这个模块还依赖其他模块，那么define()函数的第一个参数，必须是一个数组，指明该模块的依赖性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　define([&apos;myLib&apos;], function(myLib)&#123;</div><div class=\"line\">　　　　function foo()&#123;</div><div class=\"line\">　　　　　　myLib.doSomething();</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　　　return &#123;</div><div class=\"line\">　　　　　　foo : foo</div><div class=\"line\">　　　　&#125;;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>当require()函数加载上面这个模块的时候，就会先加载myLib.js文件</p>\n<h2 id=\"加载非规范的模块\"><a href=\"#加载非规范的模块\" class=\"headerlink\" title=\"加载非规范的模块\"></a>加载非规范的模块</h2><p>理论上，require.js加载的模块，必须是按照AMD规范、用define()函数定义的模块。但是实际上，虽然已经有一部分流行的函数库（比如jQuery）符合AMD规范，更多的库并不符合。那么，require.js是否能够加载非规范的模块呢？<br>回答是可以的。<br>这样的模块在用require()加载之前，要先用require.config()方法，定义它们的一些特征。<br>举例来说，underscore和backbone这两个库，都没有采用AMD规范编写。如果要加载它们的话，必须先定义它们的特征。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　shim: &#123;</div><div class=\"line\"></div><div class=\"line\">　　　　　　&apos;underscore&apos;:&#123;</div><div class=\"line\">　　　　　　　　exports: &apos;_&apos;</div><div class=\"line\">　　　　　　&#125;,</div><div class=\"line\">　　　　　　&apos;backbone&apos;: &#123;</div><div class=\"line\">　　　　　　　　deps: [&apos;underscore&apos;, &apos;jquery&apos;],</div><div class=\"line\">　　　　　　　　exports: &apos;Backbone&apos;</div><div class=\"line\">　　　　　　&#125;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>require.config()接受一个配置对象，这个对象除了有前面说过的paths属性之外，还有一个shim属性，专门用来配置不兼容的模块。具体来说，每个模块要定义（1）exports值（输出的变量名），表明这个模块外部调用时的名称；（2）deps数组，表明该模块的依赖性。<br>比如，jQuery的插件可以这样定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　shim: &#123;</div><div class=\"line\">　　　　&apos;jquery.scroll&apos;: &#123;</div><div class=\"line\">　　　　　　deps: [&apos;jquery&apos;],</div><div class=\"line\">　　　　　　exports: &apos;jQuery.fn.scroll&apos;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>"},{"title":"hexo搭建博客教程","date":"2017-08-30T03:25:22.000Z","_content":"\n![illustration](/images/hexo/look-me.png)\n### 介绍\n本文旨在帮助没有IT背景的同学着手搭建一个酷炫的个人博客网站，基于Windows平台\n\n<!--more-->\n\n### 准备\n注册[GitHub](http://baike.baidu.com/item/GitHub)账号，了解一点有关Github的知识。\n\n### 开始\n假设我们已经有了一个github账号，那么开始准备环境\n\n1.安装Git客户端 \n[download git](https://www.git-scm.com/download/)\n下载好git安装包之后按照一般程序安装步骤安装，有选项则选择默认配置，一路next\n\n2.安装Node.js\n[download node.js](https://nodejs.org/dist/v6.10.2/node-v6.10.2-x64.msi)\n下载好node.js安装包之后按照一般程序安装步骤安装，有选项则选择默认配置，一路next\n具体安装细节可参考http://www.runoob.com/nodejs/nodejs-install-setup.html\n\n3.安装vs code\n[download vscode](https://code.visualstudio.com/Download)\n安装步骤同上\n\n### 建立仓库\n这时我们已经安装好了相关的软件，接下来初始化配置一个存放博客资源的GitHub仓库\n\n1.登录GitHub官网[地址](https://github.com/)，没有的话[注册](https://github.com/join)一个\n\n点击页面右上角加号，选择`New resposity`\n\n![new repo-1](/images/hexo/new-repository.png)\n\n\n进入仓库创建页面\n在`Respository name`下填写你的博客仓库名，切记以`.github.io`为后缀名，`Description`一栏可以随便填写一些描述文字，空着也行\n\n![new repo-2](/images/hexo/new-repo.png)\n\n\n完成博客仓库的创建之后，将跳转到如下界面\n\n![repo done](/images/hexo/repo-done.png)\n\n\n3.添加本机ssh密钥到github\n\n在桌面上右击鼠标，选择`Git GUI Here`\n\n![git gui](/images/hexo/git-gui.png)\n\n\n进入git gui界面，选择`Help`-`Show SSH Key`\n\n![git gui-2](/images/hexo/show-ssh.png)\n\n\n点击`Generate Key`生成ssh key，出现如图一串密钥，全部复制\n![generate-ssh-key](/images/hexo/ssh-key.png)\n\n\n登录github，点击头像选择`Settings`\n\n![ssh-setting](/images/hexo/ssh-setting.png)\n\n\n进入设置页面选择`SSH and GPG keys`\n\n进入SSH设置页面，点击右上角绿色按钮`New SSH key`，然后把复制的ssh key密钥粘贴到`Key`文本框里，`Title`一栏随便起个名字\n\n![add ssh key](/images/hexo/add-ssh-key.png)\n\n\n最后点击`Add SSH key`\n到了这里，GitHub一侧的配置工作全部完成\n\n\n\n### Hexo搭建\n\n1.安装Hexo\n创建一个文件夹存放hexo博客资源，进入文件夹右击鼠标选择`Git Bash Here`，将弹出一个黑乎乎的终端窗口，之后我们将在这个窗口内敲一些操作命令，我们暂时不用去了解终端命令行，只需照着打字即可\n\n\n在终端中输入`npm install -g hexo-cli`，这条命令用来安装hexo-cli\n\n检查hexo是否正确安装，输入`hexo -v`，下图为正确安装的提示信息\n\n![hexo-v](/images/hexo/hexo-v.png)\n\n\n2.初始化Hexo项目\n输入`hexo init <folder>`进行初始化（<folder>是指新建项目所放的文件夹）\n\n\n安装hexo的相关npm依赖模块：\n\n```bash\ncd <floder>\nnpm install\n```\n![hexo-v](/images/hexo/npm-install.png)\n\n\n3.测试体验hexo博客\n分别依次输入以下命令\n\n```bash\nnpm install hexo-server --save\nhexo s\n```\n出现如下提示\n![run hexo](/images/hexo/hexo-server.png)\n\n\n在浏览器中打开`http://localhost:4000`，将打开hexo站点，主题是hexo默认的\n\n![hexo homepage](/images/hexo/run-hexo.png)\n\n到了这一步，hexo的基本配置就完成了\n\n3.把hexo部署到github-pages上\n参考[Hexo 官方配置文档](https://hexo.io/zh-cn/docs/configuration.html)，通过修改hexo主配置文件`_config.yml`来部署hexo\n\n用VS code打开`_config.yml`，拖到文件最后，有如下配置语句\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n```\n修改如下\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:  \n  type: git\n  repository: git@github.com:yourname/yourname.github.io.git\n  branch: master\n```\n(注：yourname是你的github用户名)\n\n保存后，在当前文件夹打开Git Bash Here\n安装hexo的git依赖模块，出现弹窗则输入github账号和密码\n\n```bash\nnpm install hexo-deployer-git --save\n```\n发布hexo到github-pages\n```bash\nhexo d -g\n```\n### 感受hexo博客发布\n1.新建一篇博客，hexo命令语法课参考[Hexo指令官方文档](https://hexo.io/zh-cn/docs/commands.html)\n```bash\nhexo n \"这是第一篇测试博客\"\n```\n\n这条命令将在`source/_posts`目录下新建一个`.md`后缀的markdown文件，这就是你的博客文章的载体，你需要了解[markdown](http://wowubuntu.com/markdown/)语法，使用markdown来编写你的博客\n\n2.编写博客\n\n用VS code打开`这是第一篇测试博客.md`，编写文章内容，最后保存\n\n\n发布文章\n\n```bash\nhexo d -g\n```\n\n### 换个漂亮的主题\n\n### 建立git分支给博客做备份\n","source":"_posts/hexo搭建博客教程.md","raw":"---\ntitle: hexo搭建博客教程\ndate: 2017-08-30 11:25:22\ntags:\n---\n\n![illustration](/images/hexo/look-me.png)\n### 介绍\n本文旨在帮助没有IT背景的同学着手搭建一个酷炫的个人博客网站，基于Windows平台\n\n<!--more-->\n\n### 准备\n注册[GitHub](http://baike.baidu.com/item/GitHub)账号，了解一点有关Github的知识。\n\n### 开始\n假设我们已经有了一个github账号，那么开始准备环境\n\n1.安装Git客户端 \n[download git](https://www.git-scm.com/download/)\n下载好git安装包之后按照一般程序安装步骤安装，有选项则选择默认配置，一路next\n\n2.安装Node.js\n[download node.js](https://nodejs.org/dist/v6.10.2/node-v6.10.2-x64.msi)\n下载好node.js安装包之后按照一般程序安装步骤安装，有选项则选择默认配置，一路next\n具体安装细节可参考http://www.runoob.com/nodejs/nodejs-install-setup.html\n\n3.安装vs code\n[download vscode](https://code.visualstudio.com/Download)\n安装步骤同上\n\n### 建立仓库\n这时我们已经安装好了相关的软件，接下来初始化配置一个存放博客资源的GitHub仓库\n\n1.登录GitHub官网[地址](https://github.com/)，没有的话[注册](https://github.com/join)一个\n\n点击页面右上角加号，选择`New resposity`\n\n![new repo-1](/images/hexo/new-repository.png)\n\n\n进入仓库创建页面\n在`Respository name`下填写你的博客仓库名，切记以`.github.io`为后缀名，`Description`一栏可以随便填写一些描述文字，空着也行\n\n![new repo-2](/images/hexo/new-repo.png)\n\n\n完成博客仓库的创建之后，将跳转到如下界面\n\n![repo done](/images/hexo/repo-done.png)\n\n\n3.添加本机ssh密钥到github\n\n在桌面上右击鼠标，选择`Git GUI Here`\n\n![git gui](/images/hexo/git-gui.png)\n\n\n进入git gui界面，选择`Help`-`Show SSH Key`\n\n![git gui-2](/images/hexo/show-ssh.png)\n\n\n点击`Generate Key`生成ssh key，出现如图一串密钥，全部复制\n![generate-ssh-key](/images/hexo/ssh-key.png)\n\n\n登录github，点击头像选择`Settings`\n\n![ssh-setting](/images/hexo/ssh-setting.png)\n\n\n进入设置页面选择`SSH and GPG keys`\n\n进入SSH设置页面，点击右上角绿色按钮`New SSH key`，然后把复制的ssh key密钥粘贴到`Key`文本框里，`Title`一栏随便起个名字\n\n![add ssh key](/images/hexo/add-ssh-key.png)\n\n\n最后点击`Add SSH key`\n到了这里，GitHub一侧的配置工作全部完成\n\n\n\n### Hexo搭建\n\n1.安装Hexo\n创建一个文件夹存放hexo博客资源，进入文件夹右击鼠标选择`Git Bash Here`，将弹出一个黑乎乎的终端窗口，之后我们将在这个窗口内敲一些操作命令，我们暂时不用去了解终端命令行，只需照着打字即可\n\n\n在终端中输入`npm install -g hexo-cli`，这条命令用来安装hexo-cli\n\n检查hexo是否正确安装，输入`hexo -v`，下图为正确安装的提示信息\n\n![hexo-v](/images/hexo/hexo-v.png)\n\n\n2.初始化Hexo项目\n输入`hexo init <folder>`进行初始化（<folder>是指新建项目所放的文件夹）\n\n\n安装hexo的相关npm依赖模块：\n\n```bash\ncd <floder>\nnpm install\n```\n![hexo-v](/images/hexo/npm-install.png)\n\n\n3.测试体验hexo博客\n分别依次输入以下命令\n\n```bash\nnpm install hexo-server --save\nhexo s\n```\n出现如下提示\n![run hexo](/images/hexo/hexo-server.png)\n\n\n在浏览器中打开`http://localhost:4000`，将打开hexo站点，主题是hexo默认的\n\n![hexo homepage](/images/hexo/run-hexo.png)\n\n到了这一步，hexo的基本配置就完成了\n\n3.把hexo部署到github-pages上\n参考[Hexo 官方配置文档](https://hexo.io/zh-cn/docs/configuration.html)，通过修改hexo主配置文件`_config.yml`来部署hexo\n\n用VS code打开`_config.yml`，拖到文件最后，有如下配置语句\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n```\n修改如下\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:  \n  type: git\n  repository: git@github.com:yourname/yourname.github.io.git\n  branch: master\n```\n(注：yourname是你的github用户名)\n\n保存后，在当前文件夹打开Git Bash Here\n安装hexo的git依赖模块，出现弹窗则输入github账号和密码\n\n```bash\nnpm install hexo-deployer-git --save\n```\n发布hexo到github-pages\n```bash\nhexo d -g\n```\n### 感受hexo博客发布\n1.新建一篇博客，hexo命令语法课参考[Hexo指令官方文档](https://hexo.io/zh-cn/docs/commands.html)\n```bash\nhexo n \"这是第一篇测试博客\"\n```\n\n这条命令将在`source/_posts`目录下新建一个`.md`后缀的markdown文件，这就是你的博客文章的载体，你需要了解[markdown](http://wowubuntu.com/markdown/)语法，使用markdown来编写你的博客\n\n2.编写博客\n\n用VS code打开`这是第一篇测试博客.md`，编写文章内容，最后保存\n\n\n发布文章\n\n```bash\nhexo d -g\n```\n\n### 换个漂亮的主题\n\n### 建立git分支给博客做备份\n","slug":"hexo搭建博客教程","published":1,"updated":"2017-09-30T07:02:49.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj86z7jth0001ncsgfe4tedp3","content":"<p><img src=\"/images/hexo/look-me.png\" alt=\"illustration\"></p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>本文旨在帮助没有IT背景的同学着手搭建一个酷炫的个人博客网站，基于Windows平台</p>\n<a id=\"more\"></a>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>注册<a href=\"http://baike.baidu.com/item/GitHub\" target=\"_blank\" rel=\"external\">GitHub</a>账号，了解一点有关Github的知识。</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>假设我们已经有了一个github账号，那么开始准备环境</p>\n<p>1.安装Git客户端<br><a href=\"https://www.git-scm.com/download/\" target=\"_blank\" rel=\"external\">download git</a><br>下载好git安装包之后按照一般程序安装步骤安装，有选项则选择默认配置，一路next</p>\n<p>2.安装Node.js<br><a href=\"https://nodejs.org/dist/v6.10.2/node-v6.10.2-x64.msi\" target=\"_blank\" rel=\"external\">download node.js</a><br>下载好node.js安装包之后按照一般程序安装步骤安装，有选项则选择默认配置，一路next<br>具体安装细节可参考<a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"external\">http://www.runoob.com/nodejs/nodejs-install-setup.html</a></p>\n<p>3.安装vs code<br><a href=\"https://code.visualstudio.com/Download\" target=\"_blank\" rel=\"external\">download vscode</a><br>安装步骤同上</p>\n<h3 id=\"建立仓库\"><a href=\"#建立仓库\" class=\"headerlink\" title=\"建立仓库\"></a>建立仓库</h3><p>这时我们已经安装好了相关的软件，接下来初始化配置一个存放博客资源的GitHub仓库</p>\n<p>1.登录GitHub官网<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">地址</a>，没有的话<a href=\"https://github.com/join\" target=\"_blank\" rel=\"external\">注册</a>一个</p>\n<p>点击页面右上角加号，选择<code>New resposity</code></p>\n<p><img src=\"/images/hexo/new-repository.png\" alt=\"new repo-1\"></p>\n<p>进入仓库创建页面<br>在<code>Respository name</code>下填写你的博客仓库名，切记以<code>.github.io</code>为后缀名，<code>Description</code>一栏可以随便填写一些描述文字，空着也行</p>\n<p><img src=\"/images/hexo/new-repo.png\" alt=\"new repo-2\"></p>\n<p>完成博客仓库的创建之后，将跳转到如下界面</p>\n<p><img src=\"/images/hexo/repo-done.png\" alt=\"repo done\"></p>\n<p>3.添加本机ssh密钥到github</p>\n<p>在桌面上右击鼠标，选择<code>Git GUI Here</code></p>\n<p><img src=\"/images/hexo/git-gui.png\" alt=\"git gui\"></p>\n<p>进入git gui界面，选择<code>Help</code>-<code>Show SSH Key</code></p>\n<p><img src=\"/images/hexo/show-ssh.png\" alt=\"git gui-2\"></p>\n<p>点击<code>Generate Key</code>生成ssh key，出现如图一串密钥，全部复制<br><img src=\"/images/hexo/ssh-key.png\" alt=\"generate-ssh-key\"></p>\n<p>登录github，点击头像选择<code>Settings</code></p>\n<p><img src=\"/images/hexo/ssh-setting.png\" alt=\"ssh-setting\"></p>\n<p>进入设置页面选择<code>SSH and GPG keys</code></p>\n<p>进入SSH设置页面，点击右上角绿色按钮<code>New SSH key</code>，然后把复制的ssh key密钥粘贴到<code>Key</code>文本框里，<code>Title</code>一栏随便起个名字</p>\n<p><img src=\"/images/hexo/add-ssh-key.png\" alt=\"add ssh key\"></p>\n<p>最后点击<code>Add SSH key</code><br>到了这里，GitHub一侧的配置工作全部完成</p>\n<h3 id=\"Hexo搭建\"><a href=\"#Hexo搭建\" class=\"headerlink\" title=\"Hexo搭建\"></a>Hexo搭建</h3><p>1.安装Hexo<br>创建一个文件夹存放hexo博客资源，进入文件夹右击鼠标选择<code>Git Bash Here</code>，将弹出一个黑乎乎的终端窗口，之后我们将在这个窗口内敲一些操作命令，我们暂时不用去了解终端命令行，只需照着打字即可</p>\n<p>在终端中输入<code>npm install -g hexo-cli</code>，这条命令用来安装hexo-cli</p>\n<p>检查hexo是否正确安装，输入<code>hexo -v</code>，下图为正确安装的提示信息</p>\n<p><img src=\"/images/hexo/hexo-v.png\" alt=\"hexo-v\"></p>\n<p>2.初始化Hexo项目<br>输入<code>hexo init &lt;folder&gt;</code>进行初始化（<folder>是指新建项目所放的文件夹）</folder></p>\n<p>安装hexo的相关npm依赖模块：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> &lt;floder&gt;</div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p><img src=\"/images/hexo/npm-install.png\" alt=\"hexo-v\"></p>\n<p>3.测试体验hexo博客<br>分别依次输入以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-server --save</div><div class=\"line\">hexo s</div></pre></td></tr></table></figure>\n<p>出现如下提示<br><img src=\"/images/hexo/hexo-server.png\" alt=\"run hexo\"></p>\n<p>在浏览器中打开<code>http://localhost:4000</code>，将打开hexo站点，主题是hexo默认的</p>\n<p><img src=\"/images/hexo/run-hexo.png\" alt=\"hexo homepage\"></p>\n<p>到了这一步，hexo的基本配置就完成了</p>\n<p>3.把hexo部署到github-pages上<br>参考<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">Hexo 官方配置文档</a>，通过修改hexo主配置文件<code>_config.yml</code>来部署hexo</p>\n<p>用VS code打开<code>_config.yml</code>，拖到文件最后，有如下配置语句<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>:</div></pre></td></tr></table></figure></p>\n<p>修改如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\">deploy:  </div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repository: git@github.com:yourname/yourname.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>(注：yourname是你的github用户名)</p>\n<p>保存后，在当前文件夹打开Git Bash Here<br>安装hexo的git依赖模块，出现弹窗则输入github账号和密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>发布hexo到github-pages<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo d -g</div></pre></td></tr></table></figure></p>\n<h3 id=\"感受hexo博客发布\"><a href=\"#感受hexo博客发布\" class=\"headerlink\" title=\"感受hexo博客发布\"></a>感受hexo博客发布</h3><p>1.新建一篇博客，hexo命令语法课参考<a href=\"https://hexo.io/zh-cn/docs/commands.html\" target=\"_blank\" rel=\"external\">Hexo指令官方文档</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n <span class=\"string\">\"这是第一篇测试博客\"</span></div></pre></td></tr></table></figure></p>\n<p>这条命令将在<code>source/_posts</code>目录下新建一个<code>.md</code>后缀的markdown文件，这就是你的博客文章的载体，你需要了解<a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"external\">markdown</a>语法，使用markdown来编写你的博客</p>\n<p>2.编写博客</p>\n<p>用VS code打开<code>这是第一篇测试博客.md</code>，编写文章内容，最后保存</p>\n<p>发布文章</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo d -g</div></pre></td></tr></table></figure>\n<h3 id=\"换个漂亮的主题\"><a href=\"#换个漂亮的主题\" class=\"headerlink\" title=\"换个漂亮的主题\"></a>换个漂亮的主题</h3><h3 id=\"建立git分支给博客做备份\"><a href=\"#建立git分支给博客做备份\" class=\"headerlink\" title=\"建立git分支给博客做备份\"></a>建立git分支给博客做备份</h3>","site":{"data":{}},"excerpt":"<p><img src=\"/images/hexo/look-me.png\" alt=\"illustration\"></p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>本文旨在帮助没有IT背景的同学着手搭建一个酷炫的个人博客网站，基于Windows平台</p>","more":"<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>注册<a href=\"http://baike.baidu.com/item/GitHub\" target=\"_blank\" rel=\"external\">GitHub</a>账号，了解一点有关Github的知识。</p>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>假设我们已经有了一个github账号，那么开始准备环境</p>\n<p>1.安装Git客户端<br><a href=\"https://www.git-scm.com/download/\" target=\"_blank\" rel=\"external\">download git</a><br>下载好git安装包之后按照一般程序安装步骤安装，有选项则选择默认配置，一路next</p>\n<p>2.安装Node.js<br><a href=\"https://nodejs.org/dist/v6.10.2/node-v6.10.2-x64.msi\" target=\"_blank\" rel=\"external\">download node.js</a><br>下载好node.js安装包之后按照一般程序安装步骤安装，有选项则选择默认配置，一路next<br>具体安装细节可参考<a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"external\">http://www.runoob.com/nodejs/nodejs-install-setup.html</a></p>\n<p>3.安装vs code<br><a href=\"https://code.visualstudio.com/Download\" target=\"_blank\" rel=\"external\">download vscode</a><br>安装步骤同上</p>\n<h3 id=\"建立仓库\"><a href=\"#建立仓库\" class=\"headerlink\" title=\"建立仓库\"></a>建立仓库</h3><p>这时我们已经安装好了相关的软件，接下来初始化配置一个存放博客资源的GitHub仓库</p>\n<p>1.登录GitHub官网<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">地址</a>，没有的话<a href=\"https://github.com/join\" target=\"_blank\" rel=\"external\">注册</a>一个</p>\n<p>点击页面右上角加号，选择<code>New resposity</code></p>\n<p><img src=\"/images/hexo/new-repository.png\" alt=\"new repo-1\"></p>\n<p>进入仓库创建页面<br>在<code>Respository name</code>下填写你的博客仓库名，切记以<code>.github.io</code>为后缀名，<code>Description</code>一栏可以随便填写一些描述文字，空着也行</p>\n<p><img src=\"/images/hexo/new-repo.png\" alt=\"new repo-2\"></p>\n<p>完成博客仓库的创建之后，将跳转到如下界面</p>\n<p><img src=\"/images/hexo/repo-done.png\" alt=\"repo done\"></p>\n<p>3.添加本机ssh密钥到github</p>\n<p>在桌面上右击鼠标，选择<code>Git GUI Here</code></p>\n<p><img src=\"/images/hexo/git-gui.png\" alt=\"git gui\"></p>\n<p>进入git gui界面，选择<code>Help</code>-<code>Show SSH Key</code></p>\n<p><img src=\"/images/hexo/show-ssh.png\" alt=\"git gui-2\"></p>\n<p>点击<code>Generate Key</code>生成ssh key，出现如图一串密钥，全部复制<br><img src=\"/images/hexo/ssh-key.png\" alt=\"generate-ssh-key\"></p>\n<p>登录github，点击头像选择<code>Settings</code></p>\n<p><img src=\"/images/hexo/ssh-setting.png\" alt=\"ssh-setting\"></p>\n<p>进入设置页面选择<code>SSH and GPG keys</code></p>\n<p>进入SSH设置页面，点击右上角绿色按钮<code>New SSH key</code>，然后把复制的ssh key密钥粘贴到<code>Key</code>文本框里，<code>Title</code>一栏随便起个名字</p>\n<p><img src=\"/images/hexo/add-ssh-key.png\" alt=\"add ssh key\"></p>\n<p>最后点击<code>Add SSH key</code><br>到了这里，GitHub一侧的配置工作全部完成</p>\n<h3 id=\"Hexo搭建\"><a href=\"#Hexo搭建\" class=\"headerlink\" title=\"Hexo搭建\"></a>Hexo搭建</h3><p>1.安装Hexo<br>创建一个文件夹存放hexo博客资源，进入文件夹右击鼠标选择<code>Git Bash Here</code>，将弹出一个黑乎乎的终端窗口，之后我们将在这个窗口内敲一些操作命令，我们暂时不用去了解终端命令行，只需照着打字即可</p>\n<p>在终端中输入<code>npm install -g hexo-cli</code>，这条命令用来安装hexo-cli</p>\n<p>检查hexo是否正确安装，输入<code>hexo -v</code>，下图为正确安装的提示信息</p>\n<p><img src=\"/images/hexo/hexo-v.png\" alt=\"hexo-v\"></p>\n<p>2.初始化Hexo项目<br>输入<code>hexo init &lt;folder&gt;</code>进行初始化（<folder>是指新建项目所放的文件夹）</folder></p>\n<p>安装hexo的相关npm依赖模块：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> &lt;floder&gt;</div><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p><img src=\"/images/hexo/npm-install.png\" alt=\"hexo-v\"></p>\n<p>3.测试体验hexo博客<br>分别依次输入以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-server --save</div><div class=\"line\">hexo s</div></pre></td></tr></table></figure>\n<p>出现如下提示<br><img src=\"/images/hexo/hexo-server.png\" alt=\"run hexo\"></p>\n<p>在浏览器中打开<code>http://localhost:4000</code>，将打开hexo站点，主题是hexo默认的</p>\n<p><img src=\"/images/hexo/run-hexo.png\" alt=\"hexo homepage\"></p>\n<p>到了这一步，hexo的基本配置就完成了</p>\n<p>3.把hexo部署到github-pages上<br>参考<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">Hexo 官方配置文档</a>，通过修改hexo主配置文件<code>_config.yml</code>来部署hexo</p>\n<p>用VS code打开<code>_config.yml</code>，拖到文件最后，有如下配置语句<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>:</div></pre></td></tr></table></figure></p>\n<p>修改如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\">deploy:  </div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repository: git@github.com:yourname/yourname.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>(注：yourname是你的github用户名)</p>\n<p>保存后，在当前文件夹打开Git Bash Here<br>安装hexo的git依赖模块，出现弹窗则输入github账号和密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>发布hexo到github-pages<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo d -g</div></pre></td></tr></table></figure></p>\n<h3 id=\"感受hexo博客发布\"><a href=\"#感受hexo博客发布\" class=\"headerlink\" title=\"感受hexo博客发布\"></a>感受hexo博客发布</h3><p>1.新建一篇博客，hexo命令语法课参考<a href=\"https://hexo.io/zh-cn/docs/commands.html\" target=\"_blank\" rel=\"external\">Hexo指令官方文档</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n <span class=\"string\">\"这是第一篇测试博客\"</span></div></pre></td></tr></table></figure></p>\n<p>这条命令将在<code>source/_posts</code>目录下新建一个<code>.md</code>后缀的markdown文件，这就是你的博客文章的载体，你需要了解<a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"external\">markdown</a>语法，使用markdown来编写你的博客</p>\n<p>2.编写博客</p>\n<p>用VS code打开<code>这是第一篇测试博客.md</code>，编写文章内容，最后保存</p>\n<p>发布文章</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo d -g</div></pre></td></tr></table></figure>\n<h3 id=\"换个漂亮的主题\"><a href=\"#换个漂亮的主题\" class=\"headerlink\" title=\"换个漂亮的主题\"></a>换个漂亮的主题</h3><h3 id=\"建立git分支给博客做备份\"><a href=\"#建立git分支给博客做备份\" class=\"headerlink\" title=\"建立git分支给博客做备份\"></a>建立git分支给博客做备份</h3>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj86z7jth0000ncsgsan8jc8k","tag_id":"cj86z7jth0002ncsgfymqoxsb","_id":"cj86z7jtw0004ncsgqi1pvojq"},{"post_id":"cj86z7jth0000ncsgsan8jc8k","tag_id":"cj86z7jtw0003ncsggzwd67jk","_id":"cj86z7jtw0005ncsg5btb4arx"}],"Tag":[{"name":"js","_id":"cj86z7jth0002ncsgfymqoxsb"},{"name":"require.js","_id":"cj86z7jtw0003ncsggzwd67jk"}]}}